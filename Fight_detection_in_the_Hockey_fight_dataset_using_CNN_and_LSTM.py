{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "99165c94",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-03-17 15:05:33.414625: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import cv2\n",
    "import os\n",
    "import numpy as np\n",
    "import keras\n",
    "import matplotlib.pyplot as plt\n",
    "import download\n",
    "from random import shuffle\n",
    "from keras.applications import VGG16\n",
    "from keras import backend as K\n",
    "from keras.models import Model, Sequential\n",
    "from keras.layers import Input\n",
    "from keras.layers import LSTM\n",
    "from keras.layers import Dense, Activation\n",
    "import sys\n",
    "import h5py\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5ceb7907",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2.11.0'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "keras.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b5931efb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_progress(count, max_count):\n",
    "    # Percentage completion.\n",
    "    pct_complete = count / max_count\n",
    "\n",
    "    # Status-message. Note the \\r which means the line should\n",
    "    # overwrite itself.\n",
    "    msg = \"\\r- Progress: {0:.1%}\".format(pct_complete)\n",
    "\n",
    "    # Print it.\n",
    "    sys.stdout.write(msg)\n",
    "    sys.stdout.flush()\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5dc87387",
   "metadata": {},
   "outputs": [],
   "source": [
    "in_dir = '/Users/elijahadedamola/Documents/project_dataset/data2/fights'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "db1529c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Frame size  \n",
    "img_size = 224\n",
    "\n",
    "img_size_touple = (img_size, img_size)\n",
    "\n",
    "# Number of channels (RGB)\n",
    "num_channels = 3\n",
    "\n",
    "# Flat frame size\n",
    "img_size_flat = img_size * img_size * num_channels\n",
    "\n",
    "# Number of classes for classification (Violence-No Violence)\n",
    "num_classes = 2\n",
    "\n",
    "# Number of files to train\n",
    "_num_files_train = 1\n",
    "\n",
    "# Number of frames per video\n",
    "_images_per_file = 20\n",
    "\n",
    "# Number of frames per training set\n",
    "_num_images_train = _num_files_train * _images_per_file\n",
    "\n",
    "# Video extension\n",
    "video_exts = \".avi\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7d3714de",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_frames(current_dir, file_name):\n",
    "    \n",
    "    in_file = os.path.join(current_dir, file_name)\n",
    "    \n",
    "    images = []\n",
    "    \n",
    "    vidcap = cv2.VideoCapture(in_file)\n",
    "    \n",
    "    success,image = vidcap.read()\n",
    "        \n",
    "    count = 0\n",
    "\n",
    "    while count<_images_per_file:\n",
    "                \n",
    "        RGB_img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n",
    "    \n",
    "        res = cv2.resize(RGB_img, dsize=(img_size, img_size),\n",
    "                                 interpolation=cv2.INTER_CUBIC)\n",
    "    \n",
    "        images.append(res)\n",
    "    \n",
    "        success,image = vidcap.read()\n",
    "    \n",
    "        count += 1\n",
    "        \n",
    "    resul = np.array(images)\n",
    "    \n",
    "    resul = (resul / 255.).astype(np.float16)\n",
    "        \n",
    "    return resul"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "fb214720",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_frames(current_dir, file_name):\n",
    "    in_file = os.path.join(current_dir, file_name)\n",
    "    \n",
    "    images = []\n",
    "    spectrograms = []\n",
    "    \n",
    "    vidcap = cv2.VideoCapture(in_file)\n",
    "    \n",
    "    success,image = vidcap.read()\n",
    "        \n",
    "    count = 0\n",
    "\n",
    "    while count < _images_per_file:\n",
    "        RGB_img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n",
    "    \n",
    "        res = cv2.resize(RGB_img, dsize=(img_size, img_size),\n",
    "                          interpolation=cv2.INTER_CUBIC)\n",
    "    \n",
    "        images.append(res)\n",
    "        \n",
    "        # Compute spectrogram of motion blur\n",
    "        gray_img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n",
    "        blur_img = cv2.GaussianBlur(gray_img, (kernel_size, kernel_size), 0)\n",
    "        _, _, spectrogram = plt.specgram(blur_img, Fs=1, cmap='gray', NFFT=nfft, noverlap=noverlap)\n",
    "        spectrogram_resized = cv2.resize(spectrogram, dsize=(img_size, img_size), interpolation=cv2.INTER_CUBIC)\n",
    "        spectrograms.append(spectrogram_resized[..., np.newaxis])\n",
    "    \n",
    "        success, image = vidcap.read()\n",
    "    \n",
    "        count += 1\n",
    "        \n",
    "    frames = np.array(images)\n",
    "    frames = (frames / 255.).astype(np.float16)\n",
    "    \n",
    "    spectrograms = np.array(spectrograms)\n",
    "    spectrograms = (spectrograms - np.min(spectrograms)) / (np.max(spectrograms) - np.min(spectrograms))\n",
    "    \n",
    "    frames_with_spectrograms = np.concatenate((frames, spectrograms), axis=-1)\n",
    "    \n",
    "    return frames_with_spectrograms\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c26563eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def label_video_names(in_dir):\n",
    "    \n",
    "    # list containing video names\n",
    "    names = []\n",
    "    # list containin video labels [1, 0] if it has violence and [0, 1] if not\n",
    "    labels = []\n",
    "    \n",
    "    \n",
    "    for current_dir, dir_names,file_names in os.walk(in_dir):\n",
    "        \n",
    "        for file_name in file_names:\n",
    "            \n",
    "            if file_name[0:2] == 'ne':\n",
    "                labels.append([1,0])\n",
    "                names.append(file_name)\n",
    "            elif file_name[0:2] == 'no':\n",
    "                labels.append([0,1])\n",
    "                names.append(file_name)\n",
    "                     \n",
    "            \n",
    "    c = list(zip(names,labels))\n",
    "    # Suffle the data (names and labels)\n",
    "    shuffle(c)\n",
    "    \n",
    "    names, labels = zip(*c)\n",
    "            \n",
    "    return names, labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a028c4aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# First get the names and labels of the whole videos\n",
    "names, labels = label_video_names(in_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3299ae6d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'newfi11.avi'"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "names[12]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "98e9aed0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7fd3aec42760>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(visible_frame[3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fb741063",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7fd3901be400>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(visible_frame[15])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c6d2df92",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-03-08 13:02:04.422008: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "image_model = VGG16(include_top=True, weights='imagenet')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "fcdc3c60",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"vgg16\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " input_1 (InputLayer)        [(None, 224, 224, 3)]     0         \n",
      "                                                                 \n",
      " block1_conv1 (Conv2D)       (None, 224, 224, 64)      1792      \n",
      "                                                                 \n",
      " block1_conv2 (Conv2D)       (None, 224, 224, 64)      36928     \n",
      "                                                                 \n",
      " block1_pool (MaxPooling2D)  (None, 112, 112, 64)      0         \n",
      "                                                                 \n",
      " block2_conv1 (Conv2D)       (None, 112, 112, 128)     73856     \n",
      "                                                                 \n",
      " block2_conv2 (Conv2D)       (None, 112, 112, 128)     147584    \n",
      "                                                                 \n",
      " block2_pool (MaxPooling2D)  (None, 56, 56, 128)       0         \n",
      "                                                                 \n",
      " block3_conv1 (Conv2D)       (None, 56, 56, 256)       295168    \n",
      "                                                                 \n",
      " block3_conv2 (Conv2D)       (None, 56, 56, 256)       590080    \n",
      "                                                                 \n",
      " block3_conv3 (Conv2D)       (None, 56, 56, 256)       590080    \n",
      "                                                                 \n",
      " block3_pool (MaxPooling2D)  (None, 28, 28, 256)       0         \n",
      "                                                                 \n",
      " block4_conv1 (Conv2D)       (None, 28, 28, 512)       1180160   \n",
      "                                                                 \n",
      " block4_conv2 (Conv2D)       (None, 28, 28, 512)       2359808   \n",
      "                                                                 \n",
      " block4_conv3 (Conv2D)       (None, 28, 28, 512)       2359808   \n",
      "                                                                 \n",
      " block4_pool (MaxPooling2D)  (None, 14, 14, 512)       0         \n",
      "                                                                 \n",
      " block5_conv1 (Conv2D)       (None, 14, 14, 512)       2359808   \n",
      "                                                                 \n",
      " block5_conv2 (Conv2D)       (None, 14, 14, 512)       2359808   \n",
      "                                                                 \n",
      " block5_conv3 (Conv2D)       (None, 14, 14, 512)       2359808   \n",
      "                                                                 \n",
      " block5_pool (MaxPooling2D)  (None, 7, 7, 512)         0         \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 25088)             0         \n",
      "                                                                 \n",
      " fc1 (Dense)                 (None, 4096)              102764544 \n",
      "                                                                 \n",
      " fc2 (Dense)                 (None, 4096)              16781312  \n",
      "                                                                 \n",
      " predictions (Dense)         (None, 1000)              4097000   \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 138,357,544\n",
      "Trainable params: 138,357,544\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "\n",
    "image_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2d685667",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "input_shape = image_model.layers[0].output_shape[1:3]\n",
    "input_shape\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8bdddfaa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The input of the VGG16 net have dimensions: (224, 224)\n",
      "The output of the selecter layer of VGG16 net have dimensions:  4096\n"
     ]
    }
   ],
   "source": [
    "# We will use the output of the layer prior to the final\n",
    "# classification-layer which is named fc2. This is a fully-connected (or dense) layer.\n",
    "transfer_layer = image_model.get_layer('fc2')\n",
    "\n",
    "image_model_transfer = Model(inputs=image_model.input,\n",
    "                             outputs=transfer_layer.output)\n",
    "\n",
    "transfer_values_size = K.int_shape(transfer_layer.output)[1]\n",
    "\n",
    "\n",
    "print(\"The input of the VGG16 net have dimensions:\",K.int_shape(image_model.input)[1:3])\n",
    "\n",
    "print(\"The output of the selecter layer of VGG16 net have dimensions: \", transfer_values_size)\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e17de7df",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_transfer_values(current_dir, file_name):\n",
    "    \n",
    "    # Pre-allocate input-batch-array for images.\n",
    "    shape = (_images_per_file,) + img_size_touple + (3,)\n",
    "    \n",
    "    image_batch = np.zeros(shape=shape, dtype=np.float16)\n",
    "    \n",
    "    image_batch = get_frames(current_dir, file_name)\n",
    "      \n",
    "    # Pre-allocate output-array for transfer-values.\n",
    "    # Note that we use 16-bit floating-points to save memory.\n",
    "    shape = (_images_per_file, transfer_values_size)\n",
    "    transfer_values = np.zeros(shape=shape, dtype=np.float16)\n",
    "\n",
    "    transfer_values = \\\n",
    "            image_model_transfer.predict(image_batch)\n",
    "            \n",
    "    return transfer_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "077f9e9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def proces_transfer(vid_names, in_dir, labels):\n",
    "    \n",
    "    count = 0\n",
    "    \n",
    "    tam = len(vid_names)\n",
    "    \n",
    "    # Pre-allocate input-batch-array for images.\n",
    "    shape = (_images_per_file,) + img_size_touple + (3,)\n",
    "    \n",
    "    while count<tam:\n",
    "        \n",
    "        video_name = vid_names[count]\n",
    "        \n",
    "        image_batch = np.zeros(shape=shape, dtype=np.float16)\n",
    "    \n",
    "        image_batch = get_frames(in_dir, video_name)\n",
    "        \n",
    "         # Note that we use 16-bit floating-points to save memory.\n",
    "        shape = (_images_per_file, transfer_values_size, transfer_values_size)\n",
    "        transfer_values = np.zeros(shape=shape, dtype=np.float16)\n",
    "        \n",
    "        transfer_values = \\\n",
    "            image_model_transfer.predict(image_batch)\n",
    "         \n",
    "        labels1 = labels[count]\n",
    "        \n",
    "        aux = np.ones([20,2])\n",
    "        \n",
    "        labelss = labels1*aux\n",
    "        \n",
    "        yield transfer_values, labelss\n",
    "        \n",
    "        count+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "bc44a05e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_files(n_files):\n",
    "    \n",
    "    gen = proces_transfer(names_training, in_dir, labels_training)\n",
    "\n",
    "    numer = 1\n",
    "\n",
    "    # Read the first chunk to get the column dtypes\n",
    "    chunk = next(gen)\n",
    "\n",
    "    row_count = chunk[0].shape[0]\n",
    "    row_count2 = chunk[1].shape[0]\n",
    "    \n",
    "    with h5py.File('prueba.h5', 'w') as f:\n",
    "    \n",
    "        # Initialize a resizable dataset to hold the output\n",
    "        maxshape = (None,) + chunk[0].shape[1:]\n",
    "        maxshape2 = (None,) + chunk[1].shape[1:]\n",
    "    \n",
    "    \n",
    "        dset = f.create_dataset('data', shape=chunk[0].shape, maxshape=maxshape,\n",
    "                                chunks=chunk[0].shape, dtype=chunk[0].dtype)\n",
    "    \n",
    "        dset2 = f.create_dataset('labels', shape=chunk[1].shape, maxshape=maxshape2,\n",
    "                                 chunks=chunk[1].shape, dtype=chunk[1].dtype)\n",
    "    \n",
    "         # Write the first chunk of rows\n",
    "        dset[:] = chunk[0]\n",
    "        dset2[:] = chunk[1]\n",
    "\n",
    "        for chunk in gen:\n",
    "            \n",
    "            if numer == n_files:\n",
    "            \n",
    "                break\n",
    "\n",
    "            # Resize the dataset to accommodate the next chunk of rows\n",
    "            dset.resize(row_count + chunk[0].shape[0], axis=0)\n",
    "            dset2.resize(row_count2 + chunk[1].shape[0], axis=0)\n",
    "\n",
    "            # Write the next chunk\n",
    "            dset[row_count:] = chunk[0]\n",
    "            dset2[row_count:] = chunk[1]\n",
    "\n",
    "            # Increment the row count\n",
    "            row_count += chunk[0].shape[0]\n",
    "            row_count2 += chunk[1].shape[0]\n",
    "            \n",
    "            print_progress(numer, n_files)\n",
    "        \n",
    "            numer += 1\n",
    "     \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5cd474fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_files_test(n_files):\n",
    "    \n",
    "    gen = proces_transfer(names_test, in_dir, labels_test)\n",
    "\n",
    "    numer = 1\n",
    "\n",
    "    # Read the first chunk to get the column dtypes\n",
    "    chunk = next(gen)\n",
    "\n",
    "    row_count = chunk[0].shape[0]\n",
    "    row_count2 = chunk[1].shape[0]\n",
    "    \n",
    "    with h5py.File('pruebavalidation.h5', 'w') as f:\n",
    "    \n",
    "        # Initialize a resizable dataset to hold the output\n",
    "        maxshape = (None,) + chunk[0].shape[1:]\n",
    "        maxshape2 = (None,) + chunk[1].shape[1:]\n",
    "    \n",
    "    \n",
    "        dset = f.create_dataset('data', shape=chunk[0].shape, maxshape=maxshape,\n",
    "                                chunks=chunk[0].shape, dtype=chunk[0].dtype)\n",
    "    \n",
    "        dset2 = f.create_dataset('labels', shape=chunk[1].shape, maxshape=maxshape2,\n",
    "                                 chunks=chunk[1].shape, dtype=chunk[1].dtype)\n",
    "    \n",
    "         # Write the first chunk of rows\n",
    "        dset[:] = chunk[0]\n",
    "        dset2[:] = chunk[1]\n",
    "\n",
    "        for chunk in gen:\n",
    "            \n",
    "            if numer == n_files:\n",
    "            \n",
    "                break\n",
    "\n",
    "            # Resize the dataset to accommodate the next chunk of rows\n",
    "            dset.resize(row_count + chunk[0].shape[0], axis=0)\n",
    "            dset2.resize(row_count2 + chunk[1].shape[0], axis=0)\n",
    "\n",
    "            # Write the next chunk\n",
    "            dset[row_count:] = chunk[0]\n",
    "            dset2[row_count:] = chunk[1]\n",
    "\n",
    "            # Increment the row count\n",
    "            row_count += chunk[0].shape[0]\n",
    "            row_count2 += chunk[1].shape[0]\n",
    "            \n",
    "            print_progress(numer, n_files)\n",
    "        \n",
    "            numer += 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "aba5ff2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "training_set = int(len(names)*0.8)\n",
    "test_set = int(len(names)*0.2)\n",
    "\n",
    "names_training = names[0:training_set]\n",
    "names_test = names[training_set:]\n",
    "\n",
    "labels_training = labels[0:training_set]\n",
    "labels_test = labels[training_set:]\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e7b9a645",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 3s 3s/step\n",
      "1/1 [==============================] - 3s 3s/step\n",
      "1/1 [==============================] - 3s 3s/step\n",
      "1/1 [==============================] - 3s 3s/step\n",
      "1/1 [==============================] - 3s 3s/step\n",
      "1/1 [==============================] - 3s 3s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 7s 7s/step\n",
      "1/1 [==============================] - 7s 7s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 8s 8s/step\n",
      "1/1 [==============================] - 11s 11s/step\n",
      "1/1 [==============================] - 12s 12s/step\n",
      "1/1 [==============================] - 13s 13s/step\n",
      "1/1 [==============================] - 12s 12s/step\n",
      "1/1 [==============================] - 11s 11s/step\n",
      "1/1 [==============================] - 7s 7s/step\n",
      "1/1 [==============================] - 7s 7s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 7s 7s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 7s 7s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 8s 8s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "- Progress: 99.2%"
     ]
    }
   ],
   "source": [
    "make_files(training_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "93b886f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 3s 3s/step\n",
      "1/1 [==============================] - 3s 3s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 4s 4s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 5s 5s/step\n",
      "1/1 [==============================] - 6s 6s/step\n",
      "- Progress: 96.7%"
     ]
    }
   ],
   "source": [
    "make_files_test(test_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8f6c480e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def process_alldata_training():\n",
    "    \n",
    "    joint_transfer=[]\n",
    "    frames_num=20\n",
    "    count = 0\n",
    "    \n",
    "    with h5py.File('prueba.h5', 'r') as f:\n",
    "            \n",
    "        X_batch = f['data'][:]\n",
    "        y_batch = f['labels'][:]\n",
    "\n",
    "    for i in range(int(len(X_batch)/frames_num)):\n",
    "        inc = count+frames_num\n",
    "        joint_transfer.append([X_batch[count:inc],y_batch[count]])\n",
    "        count =inc\n",
    "        \n",
    "    data =[]\n",
    "    target=[]\n",
    "    \n",
    "    for i in joint_transfer:\n",
    "        data.append(i[0])\n",
    "        target.append(np.array(i[1]))\n",
    "        \n",
    "    return data, target\n",
    "     \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "067777b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def process_alldata_test():\n",
    "    \n",
    "    joint_transfer=[]\n",
    "    frames_num=20\n",
    "    count = 0\n",
    "    \n",
    "    with h5py.File('pruebavalidation.h5', 'r') as f:\n",
    "            \n",
    "        X_batch = f['data'][:]\n",
    "        y_batch = f['labels'][:]\n",
    "\n",
    "    for i in range(int(len(X_batch)/frames_num)):\n",
    "        inc = count+frames_num\n",
    "        joint_transfer.append([X_batch[count:inc],y_batch[count]])\n",
    "        count =inc\n",
    "        \n",
    "    data =[]\n",
    "    target=[]\n",
    "    \n",
    "    for i in joint_transfer:\n",
    "        data.append(i[0])\n",
    "        target.append(np.array(i[1]))\n",
    "        \n",
    "    return data, target\n",
    "     \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b4638896",
   "metadata": {},
   "outputs": [],
   "source": [
    "data, target = process_alldata_training()\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4f6c6c00",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_test, target_test = process_alldata_test()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "326153e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "chunk_size = 4096\n",
    "n_chunks = 20\n",
    "rnn_size = 512\n",
    "\n",
    "model = Sequential()\n",
    "model.add(LSTM(rnn_size, input_shape=(n_chunks, chunk_size)))\n",
    "model.add(Dense(1024))\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dense(50))\n",
    "model.add(Activation('sigmoid'))\n",
    "model.add(Dense(2))\n",
    "model.add(Activation('softmax'))\n",
    "model.compile(loss='mean_squared_error', optimizer='adam',metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "bcbeaf34",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200\n",
      "1/1 - 3s - loss: 0.2335 - accuracy: 0.6583 - 3s/epoch - 3s/step\n",
      "Epoch 2/200\n",
      "1/1 - 1s - loss: 0.2913 - accuracy: 0.6583 - 643ms/epoch - 643ms/step\n",
      "Epoch 3/200\n",
      "1/1 - 1s - loss: 0.2373 - accuracy: 0.6583 - 616ms/epoch - 616ms/step\n",
      "Epoch 4/200\n",
      "1/1 - 1s - loss: 0.2574 - accuracy: 0.3417 - 613ms/epoch - 613ms/step\n",
      "Epoch 5/200\n",
      "1/1 - 1s - loss: 0.2204 - accuracy: 0.6583 - 654ms/epoch - 654ms/step\n",
      "Epoch 6/200\n",
      "1/1 - 1s - loss: 0.2219 - accuracy: 0.6583 - 636ms/epoch - 636ms/step\n",
      "Epoch 7/200\n",
      "1/1 - 1s - loss: 0.2250 - accuracy: 0.6583 - 670ms/epoch - 670ms/step\n",
      "Epoch 8/200\n",
      "1/1 - 1s - loss: 0.2144 - accuracy: 0.6583 - 704ms/epoch - 704ms/step\n",
      "Epoch 9/200\n",
      "1/1 - 1s - loss: 0.2042 - accuracy: 0.6583 - 747ms/epoch - 747ms/step\n",
      "Epoch 10/200\n",
      "1/1 - 1s - loss: 0.1983 - accuracy: 0.6583 - 781ms/epoch - 781ms/step\n",
      "Epoch 11/200\n",
      "1/1 - 1s - loss: 0.1857 - accuracy: 0.6583 - 808ms/epoch - 808ms/step\n",
      "Epoch 12/200\n",
      "1/1 - 1s - loss: 0.1700 - accuracy: 0.6583 - 821ms/epoch - 821ms/step\n",
      "Epoch 13/200\n",
      "1/1 - 1s - loss: 0.1508 - accuracy: 0.7750 - 913ms/epoch - 913ms/step\n",
      "Epoch 14/200\n",
      "1/1 - 1s - loss: 0.1269 - accuracy: 0.9417 - 1s/epoch - 1s/step\n",
      "Epoch 15/200\n",
      "1/1 - 1s - loss: 0.1036 - accuracy: 0.9333 - 1s/epoch - 1s/step\n",
      "Epoch 16/200\n",
      "1/1 - 1s - loss: 0.0861 - accuracy: 0.9417 - 886ms/epoch - 886ms/step\n",
      "Epoch 17/200\n",
      "1/1 - 1s - loss: 0.0727 - accuracy: 0.9333 - 888ms/epoch - 888ms/step\n",
      "Epoch 18/200\n",
      "1/1 - 1s - loss: 0.0615 - accuracy: 0.9417 - 939ms/epoch - 939ms/step\n",
      "Epoch 19/200\n",
      "1/1 - 1s - loss: 0.0567 - accuracy: 0.9417 - 954ms/epoch - 954ms/step\n",
      "Epoch 20/200\n",
      "1/1 - 1s - loss: 0.0516 - accuracy: 0.9333 - 913ms/epoch - 913ms/step\n",
      "Epoch 21/200\n",
      "1/1 - 1s - loss: 0.0516 - accuracy: 0.9500 - 885ms/epoch - 885ms/step\n",
      "Epoch 22/200\n",
      "1/1 - 1s - loss: 0.0425 - accuracy: 0.9333 - 1s/epoch - 1s/step\n",
      "Epoch 23/200\n",
      "1/1 - 1s - loss: 0.0415 - accuracy: 0.9333 - 1s/epoch - 1s/step\n",
      "Epoch 24/200\n",
      "1/1 - 1s - loss: 0.0343 - accuracy: 0.9500 - 878ms/epoch - 878ms/step\n",
      "Epoch 25/200\n",
      "1/1 - 1s - loss: 0.0356 - accuracy: 0.9667 - 907ms/epoch - 907ms/step\n",
      "Epoch 26/200\n",
      "1/1 - 1s - loss: 0.0370 - accuracy: 0.9417 - 884ms/epoch - 884ms/step\n",
      "Epoch 27/200\n",
      "1/1 - 1s - loss: 0.0314 - accuracy: 0.9500 - 876ms/epoch - 876ms/step\n",
      "Epoch 28/200\n",
      "1/1 - 1s - loss: 0.0324 - accuracy: 0.9583 - 884ms/epoch - 884ms/step\n",
      "Epoch 29/200\n",
      "1/1 - 1s - loss: 0.0224 - accuracy: 0.9667 - 846ms/epoch - 846ms/step\n",
      "Epoch 30/200\n",
      "1/1 - 1s - loss: 0.0255 - accuracy: 0.9583 - 848ms/epoch - 848ms/step\n",
      "Epoch 31/200\n",
      "1/1 - 1s - loss: 0.0192 - accuracy: 0.9750 - 845ms/epoch - 845ms/step\n",
      "Epoch 32/200\n",
      "1/1 - 1s - loss: 0.0218 - accuracy: 0.9833 - 853ms/epoch - 853ms/step\n",
      "Epoch 33/200\n",
      "1/1 - 1s - loss: 0.0177 - accuracy: 0.9667 - 863ms/epoch - 863ms/step\n",
      "Epoch 34/200\n",
      "1/1 - 1s - loss: 0.0186 - accuracy: 0.9750 - 853ms/epoch - 853ms/step\n",
      "Epoch 35/200\n",
      "1/1 - 1s - loss: 0.0148 - accuracy: 0.9833 - 855ms/epoch - 855ms/step\n",
      "Epoch 36/200\n",
      "1/1 - 1s - loss: 0.0162 - accuracy: 0.9833 - 852ms/epoch - 852ms/step\n",
      "Epoch 37/200\n",
      "1/1 - 1s - loss: 0.0125 - accuracy: 0.9833 - 864ms/epoch - 864ms/step\n",
      "Epoch 38/200\n",
      "1/1 - 1s - loss: 0.0140 - accuracy: 0.9750 - 847ms/epoch - 847ms/step\n",
      "Epoch 39/200\n",
      "1/1 - 1s - loss: 0.0102 - accuracy: 0.9917 - 866ms/epoch - 866ms/step\n",
      "Epoch 40/200\n",
      "1/1 - 1s - loss: 0.0108 - accuracy: 0.9833 - 847ms/epoch - 847ms/step\n",
      "Epoch 41/200\n",
      "1/1 - 1s - loss: 0.0085 - accuracy: 0.9917 - 840ms/epoch - 840ms/step\n",
      "Epoch 42/200\n",
      "1/1 - 1s - loss: 0.0089 - accuracy: 0.9833 - 858ms/epoch - 858ms/step\n",
      "Epoch 43/200\n",
      "1/1 - 1s - loss: 0.0057 - accuracy: 0.9917 - 845ms/epoch - 845ms/step\n",
      "Epoch 44/200\n",
      "1/1 - 1s - loss: 0.0063 - accuracy: 0.9917 - 847ms/epoch - 847ms/step\n",
      "Epoch 45/200\n",
      "1/1 - 1s - loss: 0.0040 - accuracy: 1.0000 - 831ms/epoch - 831ms/step\n",
      "Epoch 46/200\n",
      "1/1 - 1s - loss: 0.0047 - accuracy: 1.0000 - 843ms/epoch - 843ms/step\n",
      "Epoch 47/200\n",
      "1/1 - 1s - loss: 0.0029 - accuracy: 1.0000 - 857ms/epoch - 857ms/step\n",
      "Epoch 48/200\n",
      "1/1 - 1s - loss: 0.0029 - accuracy: 1.0000 - 850ms/epoch - 850ms/step\n",
      "Epoch 49/200\n",
      "1/1 - 1s - loss: 0.0018 - accuracy: 1.0000 - 843ms/epoch - 843ms/step\n",
      "Epoch 50/200\n",
      "1/1 - 1s - loss: 0.0020 - accuracy: 1.0000 - 857ms/epoch - 857ms/step\n",
      "Epoch 51/200\n",
      "1/1 - 1s - loss: 0.0011 - accuracy: 1.0000 - 855ms/epoch - 855ms/step\n",
      "Epoch 52/200\n",
      "1/1 - 1s - loss: 0.0013 - accuracy: 1.0000 - 841ms/epoch - 841ms/step\n",
      "Epoch 53/200\n",
      "1/1 - 1s - loss: 9.1741e-04 - accuracy: 1.0000 - 877ms/epoch - 877ms/step\n",
      "Epoch 54/200\n",
      "1/1 - 1s - loss: 6.3952e-04 - accuracy: 1.0000 - 892ms/epoch - 892ms/step\n",
      "Epoch 55/200\n",
      "1/1 - 1s - loss: 7.1459e-04 - accuracy: 1.0000 - 877ms/epoch - 877ms/step\n",
      "Epoch 56/200\n",
      "1/1 - 1s - loss: 6.3295e-04 - accuracy: 1.0000 - 879ms/epoch - 879ms/step\n",
      "Epoch 57/200\n",
      "1/1 - 1s - loss: 4.4131e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 58/200\n",
      "1/1 - 1s - loss: 3.6706e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 59/200\n",
      "1/1 - 1s - loss: 3.8509e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 60/200\n",
      "1/1 - 1s - loss: 3.9138e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 61/200\n",
      "1/1 - 1s - loss: 3.3059e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 62/200\n",
      "1/1 - 1s - loss: 2.6851e-04 - accuracy: 1.0000 - 968ms/epoch - 968ms/step\n",
      "Epoch 63/200\n",
      "1/1 - 1s - loss: 2.4115e-04 - accuracy: 1.0000 - 978ms/epoch - 978ms/step\n",
      "Epoch 64/200\n",
      "1/1 - 1s - loss: 2.3766e-04 - accuracy: 1.0000 - 964ms/epoch - 964ms/step\n",
      "Epoch 65/200\n",
      "1/1 - 1s - loss: 2.4055e-04 - accuracy: 1.0000 - 960ms/epoch - 960ms/step\n",
      "Epoch 66/200\n",
      "1/1 - 1s - loss: 2.3607e-04 - accuracy: 1.0000 - 964ms/epoch - 964ms/step\n",
      "Epoch 67/200\n",
      "1/1 - 1s - loss: 2.2008e-04 - accuracy: 1.0000 - 966ms/epoch - 966ms/step\n",
      "Epoch 68/200\n",
      "1/1 - 1s - loss: 1.9858e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 69/200\n",
      "1/1 - 1s - loss: 1.7943e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 70/200\n",
      "1/1 - 1s - loss: 1.6645e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 71/200\n",
      "1/1 - 1s - loss: 1.5973e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 72/200\n",
      "1/1 - 1s - loss: 1.5736e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 73/200\n",
      "1/1 - 1s - loss: 1.5639e-04 - accuracy: 1.0000 - 923ms/epoch - 923ms/step\n",
      "Epoch 74/200\n",
      "1/1 - 1s - loss: 1.5391e-04 - accuracy: 1.0000 - 955ms/epoch - 955ms/step\n",
      "Epoch 75/200\n",
      "1/1 - 1s - loss: 1.4870e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 76/200\n",
      "1/1 - 1s - loss: 1.4165e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 77/200\n",
      "1/1 - 1s - loss: 1.3460e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 78/200\n",
      "1/1 - 1s - loss: 1.2884e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 79/200\n",
      "1/1 - 1s - loss: 1.2479e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 80/200\n",
      "1/1 - 1s - loss: 1.2222e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 81/200\n",
      "1/1 - 1s - loss: 1.2059e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 82/200\n",
      "1/1 - 1s - loss: 1.1936e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 83/200\n",
      "1/1 - 1s - loss: 1.1805e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 84/200\n",
      "1/1 - 1s - loss: 1.1640e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 85/200\n",
      "1/1 - 1s - loss: 1.1436e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 86/200\n",
      "1/1 - 1s - loss: 1.1206e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 87/200\n",
      "1/1 - 1s - loss: 1.0970e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 88/200\n",
      "1/1 - 1s - loss: 1.0747e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 89/200\n",
      "1/1 - 1s - loss: 1.0550e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 90/200\n",
      "1/1 - 1s - loss: 1.0384e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 91/200\n",
      "1/1 - 1s - loss: 1.0247e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 92/200\n",
      "1/1 - 1s - loss: 1.0131e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 93/200\n",
      "1/1 - 1s - loss: 1.0028e-04 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 94/200\n",
      "1/1 - 1s - loss: 9.9269e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 95/200\n",
      "1/1 - 1s - loss: 9.8201e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 96/200\n",
      "1/1 - 1s - loss: 9.7043e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 97/200\n",
      "1/1 - 1s - loss: 9.5804e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 98/200\n",
      "1/1 - 1s - loss: 9.4525e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 99/200\n",
      "1/1 - 1s - loss: 9.3259e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 100/200\n",
      "1/1 - 1s - loss: 9.2050e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 101/200\n",
      "1/1 - 1s - loss: 9.0926e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 102/200\n",
      "1/1 - 1s - loss: 8.9894e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 103/200\n",
      "1/1 - 1s - loss: 8.8941e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 104/200\n",
      "1/1 - 1s - loss: 8.8044e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 105/200\n",
      "1/1 - 1s - loss: 8.7173e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 106/200\n",
      "1/1 - 1s - loss: 8.6304e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 107/200\n",
      "1/1 - 1s - loss: 8.5421e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 108/200\n",
      "1/1 - 1s - loss: 8.4520e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 109/200\n",
      "1/1 - 1s - loss: 8.3604e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 110/200\n",
      "1/1 - 1s - loss: 8.2685e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 111/200\n",
      "1/1 - 1s - loss: 8.1775e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 112/200\n",
      "1/1 - 1s - loss: 8.0885e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 113/200\n",
      "1/1 - 1s - loss: 8.0022e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 114/200\n",
      "1/1 - 1s - loss: 7.9186e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 115/200\n",
      "1/1 - 1s - loss: 7.8375e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 116/200\n",
      "1/1 - 1s - loss: 7.7584e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 117/200\n",
      "1/1 - 1s - loss: 7.6805e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 118/200\n",
      "1/1 - 1s - loss: 7.6033e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 119/200\n",
      "1/1 - 1s - loss: 7.5262e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 120/200\n",
      "1/1 - 1s - loss: 7.4491e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 121/200\n",
      "1/1 - 1s - loss: 7.3719e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 122/200\n",
      "1/1 - 1s - loss: 7.2949e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 123/200\n",
      "1/1 - 1s - loss: 7.2182e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 124/200\n",
      "1/1 - 1s - loss: 7.1424e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 125/200\n",
      "1/1 - 1s - loss: 7.0675e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 126/200\n",
      "1/1 - 2s - loss: 6.9937e-05 - accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 127/200\n",
      "1/1 - 1s - loss: 6.9212e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 128/200\n",
      "1/1 - 1s - loss: 6.8498e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 129/200\n",
      "1/1 - 2s - loss: 6.7795e-05 - accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 130/200\n",
      "1/1 - 2s - loss: 6.7100e-05 - accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 131/200\n",
      "1/1 - 1s - loss: 6.6413e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 132/200\n",
      "1/1 - 1s - loss: 6.5732e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 133/200\n",
      "1/1 - 1s - loss: 6.5058e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 134/200\n",
      "1/1 - 1s - loss: 6.4391e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 135/200\n",
      "1/1 - 1s - loss: 6.3733e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 136/200\n",
      "1/1 - 2s - loss: 6.3082e-05 - accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 137/200\n",
      "1/1 - 1s - loss: 6.2442e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 138/200\n",
      "1/1 - 1s - loss: 6.1810e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 139/200\n",
      "1/1 - 1s - loss: 6.1189e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 140/200\n",
      "1/1 - 1s - loss: 6.0578e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 141/200\n",
      "1/1 - 1s - loss: 5.9977e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 142/200\n",
      "1/1 - 1s - loss: 5.9384e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 143/200\n",
      "1/1 - 1s - loss: 5.8801e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 144/200\n",
      "1/1 - 1s - loss: 5.8227e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 145/200\n",
      "1/1 - 1s - loss: 5.7660e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 146/200\n",
      "1/1 - 1s - loss: 5.7103e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 147/200\n",
      "1/1 - 1s - loss: 5.6554e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 148/200\n",
      "1/1 - 1s - loss: 5.6015e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 149/200\n",
      "1/1 - 1s - loss: 5.5484e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 150/200\n",
      "1/1 - 1s - loss: 5.4964e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 151/200\n",
      "1/1 - 1s - loss: 5.4451e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 152/200\n",
      "1/1 - 1s - loss: 5.3949e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 153/200\n",
      "1/1 - 1s - loss: 5.3455e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 154/200\n",
      "1/1 - 1s - loss: 5.2970e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 155/200\n",
      "1/1 - 1s - loss: 5.2493e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 156/200\n",
      "1/1 - 1s - loss: 5.2025e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 157/200\n",
      "1/1 - 1s - loss: 5.1566e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 158/200\n",
      "1/1 - 1s - loss: 5.1116e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 159/200\n",
      "1/1 - 1s - loss: 5.0673e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 160/200\n",
      "1/1 - 1s - loss: 5.0239e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 161/200\n",
      "1/1 - 2s - loss: 4.9812e-05 - accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 162/200\n",
      "1/1 - 1s - loss: 4.9394e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 163/200\n",
      "1/1 - 1s - loss: 4.8984e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 164/200\n",
      "1/1 - 1s - loss: 4.8582e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 165/200\n",
      "1/1 - 1s - loss: 4.8187e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 166/200\n",
      "1/1 - 2s - loss: 4.7800e-05 - accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 167/200\n",
      "1/1 - 2s - loss: 4.7421e-05 - accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 168/200\n",
      "1/1 - 3s - loss: 4.7049e-05 - accuracy: 1.0000 - 3s/epoch - 3s/step\n",
      "Epoch 169/200\n",
      "1/1 - 2s - loss: 4.6684e-05 - accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 170/200\n",
      "1/1 - 2s - loss: 4.6327e-05 - accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 171/200\n",
      "1/1 - 2s - loss: 4.5976e-05 - accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 172/200\n",
      "1/1 - 1s - loss: 4.5631e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 173/200\n",
      "1/1 - 1s - loss: 4.5294e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 174/200\n",
      "1/1 - 2s - loss: 4.4962e-05 - accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 175/200\n",
      "1/1 - 2s - loss: 4.4637e-05 - accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 176/200\n",
      "1/1 - 1s - loss: 4.4319e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 177/200\n",
      "1/1 - 1s - loss: 4.4006e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 178/200\n",
      "1/1 - 1s - loss: 4.3699e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 179/200\n",
      "1/1 - 1s - loss: 4.3398e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 180/200\n",
      "1/1 - 1s - loss: 4.3104e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 181/200\n",
      "1/1 - 1s - loss: 4.2814e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 182/200\n",
      "1/1 - 2s - loss: 4.2531e-05 - accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 183/200\n",
      "1/1 - 1s - loss: 4.2252e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 184/200\n",
      "1/1 - 1s - loss: 4.1979e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 185/200\n",
      "1/1 - 1s - loss: 4.1710e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 186/200\n",
      "1/1 - 1s - loss: 4.1447e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 187/200\n",
      "1/1 - 1s - loss: 4.1189e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 188/200\n",
      "1/1 - 1s - loss: 4.0935e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 189/200\n",
      "1/1 - 1s - loss: 4.0686e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 190/200\n",
      "1/1 - 1s - loss: 4.0442e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 191/200\n",
      "1/1 - 1s - loss: 4.0202e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 192/200\n",
      "1/1 - 1s - loss: 3.9966e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 193/200\n",
      "1/1 - 1s - loss: 3.9735e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 194/200\n",
      "1/1 - 1s - loss: 3.9507e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 195/200\n",
      "1/1 - 1s - loss: 3.9284e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 196/200\n",
      "1/1 - 1s - loss: 3.9065e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 197/200\n",
      "1/1 - 1s - loss: 3.8850e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 198/200\n",
      "1/1 - 1s - loss: 3.8639e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n",
      "Epoch 199/200\n",
      "1/1 - 2s - loss: 3.8431e-05 - accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 200/200\n",
      "1/1 - 1s - loss: 3.8227e-05 - accuracy: 1.0000 - 1s/epoch - 1s/step\n"
     ]
    }
   ],
   "source": [
    "epoch = 200\n",
    "batchS = 500\n",
    "\n",
    "history = model.fit(np.array(data[0:750]), np.array(target[0:750]), epochs=epoch,\n",
    "                    validation_data=(np.array(data[750:]), np.array(target[750:])), \n",
    "                    batch_size=batchS, verbose=2)\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ca048808",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 485ms/step - loss: 0.0031 - accuracy: 1.0000\n"
     ]
    }
   ],
   "source": [
    "result = model.evaluate(np.array(data_test), np.array(target_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d500d5b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "loss 0.003077015746384859\n",
      "accuracy 1.0\n"
     ]
    }
   ],
   "source": [
    "for name, value in zip(model.metrics_names, result):\n",
    "    print(name, value)\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "5ed9ce29",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['accuracy'])\n",
    "#plt.plot(history.history['val_accuracy'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'validation'], loc='upper left')\n",
    "plt.savefig('destination_path.eps', format='eps', dpi=1000)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "6fbacb55",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# summarize history for loss\n",
    "plt.plot(history.history['loss'])\n",
    "#plt.plot(history.history['val_loss'])\n",
    "plt.title('model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'validation'], loc='upper left')\n",
    "plt.savefig('destination_path1.eps', format='eps', dpi=1000)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44aef069",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "py3k",
   "language": "python",
   "name": "myenv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
